{"version":3,"sources":["components/Nav/Nav.tsx","components/Highlight/Highlight.tsx","components/Project/Project.tsx","components/Main/Main.tsx","components/Cursor/Cursor.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["Nav","React","useState","navIsOpen","setNavIsOpen","id","className","onClick","width","height","points","href","Highlight","Props","observer","IntersectionObserver","entries","forEach","entry","intersectionRatio","target","classList","add","remove","rootMargin","threshold","useEffect","document","querySelectorAll","el","observe","data-highlight","children","Project","projectImageStyle","backgroundImage","image","style","projects","cursorText","title","info","description","Main","map","project","index","key","Cursor","cursor","setCursor","getElementById","addEventListener","e","transform","clientX","clientY","opacity","Object","assign","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c6600e6c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Nav.css';\r\n\r\nconst Nav: React.FC = () => {\r\n\r\n  const [navIsOpen, setNavIsOpen] = React.useState(false);\r\n\r\n  return (\r\n    <div id=\"nav\" className={navIsOpen ? 'nav-open' : ''}>\r\n\r\n    <div id='sidebar'>\r\n      <div \r\n        id='nav-toggle' \r\n        onClick={() => setNavIsOpen(!navIsOpen)}\r\n      >\r\n\r\n        <span id='toggle-1' className={navIsOpen ? 'toggle-1-open' : ''}>\r\n          <svg width=\"20\" height=\"2\">\r\n            <polygon points=\"0,0 20,0 20,2 0,2\"/>\r\n          </svg>\r\n        </span>\r\n\r\n        <span id='toggle-2' className={navIsOpen ? 'toggle-2-open' : ''}>\r\n          <svg width=\"20\" height=\"2\">\r\n            <polygon points=\"0,0 20,0 20,2 0,2\"/>\r\n          </svg>\r\n        </span>\r\n\r\n        <span id='toggle-3' className={navIsOpen ? 'toggle-3-open' : ''}>\r\n          <svg width=\"20\" height=\"2\">\r\n            <polygon points=\"0,0 20,0 20,2 0,2\"/>\r\n          </svg>\r\n        </span>\r\n\r\n      </div>\r\n    </div>\r\n\r\n    <div id='nav-links'>\r\n      <a href=\"http://google.com\">HOME</a>\r\n      <a href=\"http://google.com\">DESIGN</a>\r\n      <a href=\"http://google.com\">ILLUSTRATION</a>\r\n      <a href=\"http://google.com\">PHOTOGRAPHY</a>\r\n      <a href=\"http://google.com\">CONTACT</a>\r\n    </div>\r\n\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\nimport './Highlight.css';\r\n\r\nconst Highlight: React.FC = (Props) => {\r\n  \r\n  const options = {\r\n    rootMargin: '-200px 0px -200px 0px',\r\n    threshold: 0.5\r\n  }\r\n\r\n  const observer = new IntersectionObserver((entries) => {\r\n    \r\n    entries.forEach(entry => {\r\n      \r\n      if(entry.intersectionRatio > 0.5) {\r\n        entry.target.classList.add('in-viewport')\r\n      }\r\n      else {\r\n        entry.target.classList.remove('in-viewport')\r\n      }\r\n    })\r\n    \r\n  }, options)\r\n\r\n  React.useEffect(() => {\r\n\r\n    let targets = document.querySelectorAll('[data-highlight]');\r\n\r\n    targets.forEach(el => {\r\n      observer.observe(el)\r\n    })\r\n\r\n  }, [observer])\r\n\r\n  return (\r\n    <div data-highlight>\r\n      {Props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Highlight;\r\n","import React from 'react';\r\nimport './Project.css';\r\n\r\nexport interface ProjectProps {\r\n  cursorText: string;\r\n  image: string;\r\n  index: number;\r\n  title?: string;\r\n  info?: string;\r\n  description?: string;\r\n}\r\n\r\nconst Project: React.FC<ProjectProps> = (Props) => {\r\n\r\n  const projectImageStyle = {\r\n    backgroundImage: `url(\"${Props.image}\")`,\r\n    height: '100px'\r\n  } as React.CSSProperties;\r\n\r\n  return (\r\n    <div className={'project'}>\r\n      <div className={'project-image'} style={projectImageStyle}></div>\r\n        <div className={'project-text'}>\r\n          <h1 className={'title'}>TITLE</h1>\r\n          <p className={'info'}>Branding<br/>June 2019</p>\r\n          <p className={'description'}>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Laboriosam saepe, hic natus amet fuga animi illum accusamus possimus dolorum porro repellat est minima recusandae culpa officia ex iusto vitae eaque esse repudiandae!</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Project;\r\n","import React from 'react';\r\nimport './Main.css';\r\n\r\nimport Highlight from '../Highlight/Highlight'\r\nimport Project from '../Project/Project';\r\n\r\nconst projects = [\r\n  {\r\n    cursorText: '01',\r\n    image: 'https://via.placeholder.com/1500x500',\r\n    title: 'TITLE',\r\n    info: 'Branding<br/>June 2019',\r\n    description: 'Lorem ipsum dolor sit amet consectetur, adipisicing elit. Sed ipsum aut sint quis repellat sit exercitationem reprehenderit eos! Voluptatibus voluptatem exercitationem quia consequatur eveniet, numquam deleniti totam incidunt, aliquid temporibus nihil ipsum.'\r\n  },\r\n  {\r\n    cursorText: '01',\r\n    image: 'https://via.placeholder.com/1500x500',\r\n    title: 'TITLE',\r\n    info: 'Branding<br/>June 2019',\r\n    description: 'Lorem ipsum dolor sit amet consectetur, adipisicing elit. Sed ipsum aut sint quis repellat sit exercitationem reprehenderit eos! Voluptatibus voluptatem exercitationem quia consequatur eveniet, numquam deleniti totam incidunt, aliquid temporibus nihil ipsum.'\r\n  },\r\n  {\r\n    cursorText: '01',\r\n    image: 'https://via.placeholder.com/1500x500',\r\n    title: 'TITLE',\r\n    info: 'Branding<br/>June 2019',\r\n    description: 'Lorem ipsum dolor sit amet consectetur, adipisicing elit. Sed ipsum aut sint quis repellat sit exercitationem reprehenderit eos! Voluptatibus voluptatem exercitationem quia consequatur eveniet, numquam deleniti totam incidunt, aliquid temporibus nihil ipsum.'\r\n  },\r\n  {\r\n    cursorText: '01',\r\n    image: 'https://via.placeholder.com/1500x500',\r\n    title: 'TITLE',\r\n    info: 'Branding<br/>June 2019',\r\n    description: 'Lorem ipsum dolor sit amet consectetur, adipisicing elit. Sed ipsum aut sint quis repellat sit exercitationem reprehenderit eos! Voluptatibus voluptatem exercitationem quia consequatur eveniet, numquam deleniti totam incidunt, aliquid temporibus nihil ipsum.'\r\n  },\r\n  {\r\n    cursorText: '01',\r\n    image: 'https://via.placeholder.com/1500x500',\r\n    title: 'TITLE',\r\n    info: 'Branding<br/>June 2019',\r\n    description: 'Lorem ipsum dolor sit amet consectetur, adipisicing elit. Sed ipsum aut sint quis repellat sit exercitationem reprehenderit eos! Voluptatibus voluptatem exercitationem quia consequatur eveniet, numquam deleniti totam incidunt, aliquid temporibus nihil ipsum.'\r\n  },\r\n  {\r\n    cursorText: '01',\r\n    image: 'https://via.placeholder.com/1500x500',\r\n    title: 'TITLE',\r\n    info: 'Branding<br/>June 2019',\r\n    description: 'Lorem ipsum dolor sit amet consectetur, adipisicing elit. Sed ipsum aut sint quis repellat sit exercitationem reprehenderit eos! Voluptatibus voluptatem exercitationem quia consequatur eveniet, numquam deleniti totam incidunt, aliquid temporibus nihil ipsum.'\r\n  }\r\n]\r\n\r\nconst Main: React.FC = () => {\r\n  return (\r\n    <div id='main'>\r\n\r\n      <div id=\"grid\">\r\n\r\n        { projects.map( (project, index) => {\r\n          return (\r\n            <Highlight key={index}>\r\n              <Project \r\n                cursorText={project.cursorText}\r\n                image={project.image}\r\n                index={index}\r\n              />\r\n            </Highlight>\r\n        )})}\r\n            \r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport './Cursor.css';\r\n\r\nconst Cursor: React.FC = () => {\r\n\r\n  const [cursor, setCursor] = React.useState<HTMLElement | any>()\r\n\r\n  //   const cursor:any = document.getElementById('cursor')\r\n  //   const cursorInner = setInnerElements();\r\n  //   const hoverElements = Array.prototype.slice.call( document.querySelectorAll('[data-hover]') );\r\n\r\n  //   React.useEffect(() => {\r\n  //     setFollowCursor()\r\n  //     setHoverListeners()\r\n  //   })\r\n\r\n  \r\n  // const setInnerElements = () => {\r\n  //   let cursorInner = document.createElement('span')\r\n  //   cursorInner.id = 'cursor-inner'\r\n  //   this.cursor.appendChild(cursorInner);\r\n\r\n  //   let cursorPointer = document.createElement('span');\r\n  //   cursorPointer.id = 'cursor-pointer'\r\n  //   this.cursor.appendChild(cursorPointer);\r\n\r\n  //   return cursorInner;\r\n  // }\r\n\r\n  // const setFollowCursor = () => {\r\n  //   cursor.id = 'cursor'\r\n  //   document.addEventListener('mousemove', (e) => {\r\n  //     let transform = {transform: `translate(${e.clientX}px, ${e.clientY}px)`, opacity: '1'} \r\n  //     Object.assign(this.cursor.style, transform );\r\n  //   })\r\n\r\n  //   document.addEventListener('mouseleave', (e) => {\r\n  //     Object.assign(this.cursor.style, {opacity: `0`}  );\r\n  //   })\r\n  // }\r\n  \r\n  // const setHoverListeners = () => {\r\n  //   for (let ele of this.hoverElements) {\r\n  //     ele.addEventListener('mouseover', (e) => {\r\n  //       this.cursorInner.classList.add('reveal-cursor')\r\n  //       this.cursorInner.innerHTML = e.target.dataset.hover\r\n  //       Object.assign(this.cursor.childNodes[1].style, {opacity: `0`}  );\r\n  //     })\r\n\r\n  //     ele.addEventListener('mouseleave', (e) => {\r\n  //       this.cursorInner.classList.remove('reveal-cursor')\r\n  //       Object.assign(this.cursor.childNodes[1].style, {opacity: `1`}  );\r\n  //     })\r\n  //   }\r\n  // }\r\n\r\n  const setCursorIcon = () => {\r\n    setCursor(document.getElementById('cursor'))\r\n    \r\n    document.addEventListener('mousemove', (e) => {\r\n      if (cursor) {\r\n        let transform = {transform: `translate(${e.clientX}px, ${e.clientY}px)`, opacity: '1'} \r\n        Object.assign(cursor.style, transform );\r\n      }\r\n    })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    setCursorIcon()\r\n  })\r\n\r\n  return (\r\n    <div id='cursor'>\r\n\r\n      <div id=\"cursor-pointer\"></div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cursor;\r\n","import React from 'react';\nimport './App.css';\n\nimport Nav from '../Nav/Nav';\nimport Main from '../Main/Main';\nimport Cursor from '../Cursor/Cursor';\n\nconst App: React.FC = () => {\n  return (\n    <div>\n\n      <Nav />\n      <Main />\n      <Cursor />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}